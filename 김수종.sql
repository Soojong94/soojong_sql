--7번--

SELECT JOB_ID , AVG(SALARY) AS 평균연봉
  FROM EMPLOYEES 
 GROUP BY JOB_ID 
HAVING AVG(SALARY) > 13000 ;
  
--8번--  
SELECT EMPLOYEE_ID, EMAIL, SALARY
FROM (
    SELECT *
    FROM EMPLOYEES
    WHERE SALARY IS NOT NULL
    ORDER BY SALARY DESC
)
WHERE ROWNUM <= 5;

--9번--
SELECT E.EMPLOYEE_ID , E.EMAIL , E.SALARY,  D. DEPARTMENT_NAME , D. LOCATION_ID 
FROM EMPLOYEES E  INNER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID  = D.DEPARTMENT_ID 
AND SALARY >=14000;

--10번--
SELECT A.DEPARTMENT_ID 
     , A.DEPARTMENT_NAME 
     , A.MANAGER_ID 
     , B.FIRST_NAME 
     , B.LAST_NAME 
  FROM DEPARTMENTS A INNER JOIN
      EMPLOYEES B 
 ON A.MANAGER_ID = B.EMPLOYEE_ID(+)
   AND A.LOCATION_ID = 1700 ;
   

--11번--
--11-(1)--
   CREATE TABLE TB_STUDENT
    (
   STUDENT_ID NUMBER NOT NULL,
   STUDENT_NAME VARCHAR2(50) NOT NULL,
   AGE NUMBER ,
   MAJOR_ID VARCHAR2(50)
   ); 
   ALTER TABLE TB_STUDENT MODIFY AGE DEFAULT 20;
 
      CREATE TABLE TB_MAJOR
    (
   MAJOR_ID VARCHAR2(50) NOT NULL,
   MAJOR_NAME VARCHAR2(100) NOT NULL,
   INST_DY VARCHAR2(8) NOT NULL
   );
   
--11-(2)--
ALTER TABLE TB_STUDENT ADD CONSTRAINT PK_STUDENT PRIMARY KEY (STUDENT_ID);
 
--11-(3)--
ALTER TABLE TB_MAJOR ADD CONSTRAINT PK_MAJOR PRIMARY KEY (MAJOR_ID);

--11-(4)--
   INSERT INTO TB_MAJOR
          VALUES(
            'M0001', '정보공학과', '19960201'
            );
    INSERT INTO TB_MAJOR
          VALUES(
            'M0002', '경영학과', '20000302'
            );
            
--11-(5)--   
 INSERT INTO TB_STUDENT
     VALUES(
             1000, '김철수', 20,  'M0001'
            );
INSERT INTO TB_STUDENT
     VALUES(
             2000, '홍길동', 21, 'M0002'
            );
--11-(6)--         
UPDATE  TB_MAJOR 
SET        MAJOR_NAME = '인공지능융합과'
WHERE   MAJOR_NAME = '정보공학과' ;

--11-(7)--
DELETE TB_STUDENT
WHERE STUDENT_ID = 1000;